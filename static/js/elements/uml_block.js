// Generated by CoffeeScript 1.9.1
(function() {
  var uml_block_class,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  uml_block_class = 'uml_block';

  this.UMLBlock = (function(superClass) {
    extend(UMLBlock, superClass);

    function UMLBlock(svg, ClassName, x1, y1, width, fields, methods, hash) {
      var beforeDragPoint, container_height, dragHandler, dragStart, label_box;
      this.svg = svg;
      this.ClassName = ClassName;
      this.x = x1;
      this.y = y1;
      this.width = width;
      this.fields = fields;
      this.methods = methods;
      this.hash = hash;
      if (!this.hash) {
        this.hash = Math.random().toString(36).substr(2, 15);
      }
      this.label_box_height = 25;
      this.field_box_height = 25;
      this.method_box_height = 25;
      this.min_container_width = 100;
      if (this.width < this.min_container_width) {
        this.width = this.min_container_width;
      }
      this.save();
      container_height = this.calc_container_height();
      this.container = this.svg.rect(this.x, this.y, this.width, container_height, 20);
      this.container.addClass(uml_block_class + '__container');
      label_box = this.add_label_box();
      this.uml_block = this.svg.group(this.container, label_box);
      this.uml_block.addClass('uml_block');
      beforeDragPoint = {
        x: 0,
        y: 0
      };
      dragStart = (function(_this) {
        return function(x, y) {
          beforeDragPoint.x = _this.x;
          return beforeDragPoint.y = _this.y;
        };
      })(this);
      dragHandler = (function(_this) {
        return function(dx, dy) {
          if (Board.utility === 1) {
            _this.x = beforeDragPoint.x + dx;
            _this.y = beforeDragPoint.y + dy;
            return _this.save();
          }
        };
      })(this);
      this.uml_block.drag();
    }

    UMLBlock.prototype.get_hash = function() {
      return this.hash;
    };

    UMLBlock.prototype.calc_container_height = function() {
      var fields_height, methods_height;
      fields_height = Object.keys(this.fields).length * this.field_box_height;
      methods_height = Object.keys(this.methods).length * this.method_box_height;
      return this.label_box_height + fields_height + methods_height;
    };

    UMLBlock.prototype.add_label_box = function() {
      this.label = this.svg.text(this.x, this.y, this.ClassName);
      this.label.addClass('uml_block__label');
      this.recalculate_label_box();
      this.label_divider = this.svg.line(this.x, this.y + this.label_box_height, this.x + this.width, this.y + this.label_box_height);
      this.label_divider.addClass('uml_block__separator');
      return this.svg.group(this.label_divider, this.label);
    };

    UMLBlock.prototype.recalculate_container = function() {
      return this.container.attr({
        x: this.x,
        y: this.y,
        width: this.width,
        height: this.calc_container_height()
      });
    };

    UMLBlock.prototype.recalculate_label_box = function() {
      var container_size, label_size;
      container_size = this.container.getBBox();
      label_size = this.label.getBBox();
      return this.label.attr({
        x: this.x + container_size.width / 2 - label_size.width / 2,
        y: this.y + label_size.height + this.label_box_height / 2 - label_size.height / 2
      });
    };

    UMLBlock.prototype.recalculate_label_separator = function() {
      return this.label_divider.attr({
        x1: this.x,
        y1: this.y + this.label_box_height,
        x2: this.x + this.width,
        y2: this.y + this.label_box_height
      });
    };

    UMLBlock.prototype.save = function() {
      return socket.emit('saveElement', this.hash, {
        type: 'uml_block',
        params: {
          name: this.ClassName,
          x: this.x,
          y: this.y,
          width: this.width,
          fields: this.fields,
          methods: this.methods
        }
      });
    };

    UMLBlock.prototype.recalculate_positions = function() {
      this.recalculate_container();
      this.recalculate_label_box();
      return this.recalculate_label_separator();
    };

    UMLBlock.prototype.update = function(params) {
      this.x = params.x;
      this.y = params.y;
      this.width = params.width;
      this.fields = params.fields;
      this.methods = params.methods;
      return this.recalculate_positions();
    };

    return UMLBlock;

  })(DefaultElement);

}).call(this);

//# sourceMappingURL=uml_block.js.map
